package nsl.sam.core.config

import nsl.sam.configurer.ConfigurersFactories
import nsl.sam.core.annotation.AuthenticationMethod
import nsl.sam.core.annotation.EnableAnnotationAttributesExtractor
import nsl.sam.core.config.ordering.OrderingHelper
import nsl.sam.core.config.ordering.ReservedNumbersFinder
import nsl.sam.core.config.sequencer.SimpleSequencer
import nsl.sam.instrumentation.InstrumentedClassProvider
import nsl.sam.logger.logger
import org.springframework.beans.factory.BeanFactory
import org.springframework.beans.factory.BeanFactoryAware
import org.springframework.beans.factory.ListableBeanFactory
import org.springframework.beans.factory.support.BeanDefinitionBuilder
import org.springframework.beans.factory.support.BeanDefinitionRegistry
import org.springframework.context.annotation.ImportBeanDefinitionRegistrar
import org.springframework.core.type.AnnotationMetadata
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter
import kotlin.reflect.full.cast

class DynamicImportBeanDefinitionRegistrar: ImportBeanDefinitionRegistrar, BeanFactoryAware {

    companion object {
        val log by logger()
    }

    lateinit var listableBeanFactory: ListableBeanFactory

    private val orderingHelper = OrderingHelper.getSingleton()

    override fun setBeanFactory(beanFactory: BeanFactory) {
        this.listableBeanFactory = ListableBeanFactory::class.cast(beanFactory)
    }

    @Synchronized
    override fun registerBeanDefinitions(importingClassMetadata: AnnotationMetadata, registry: BeanDefinitionRegistry) {

        val annotationAttributes = EnableAnnotationAttributesExtractor.extractAttributes(importingClassMetadata)
        log.info("annotation attributes for ${importingClassMetadata.className}: $annotationAttributes")

        /*
         * due to auto-ordering mechanism, I need to know all reserved order number,
         * so that they will not be used by auto-ordering
         */
        if(!orderingHelper.isAlreadyInitializedWithRestrictedList) {
            log.debug("Looking for and remembering all order numbers used explicitly with @EnableSimpleAuthenticationMethods annotation.")
            val reservedOrderNumbers = findReservedOrderNumbers()
            log.debug("Reserved order numbers: $reservedOrderNumbers")
            orderingHelper.initializeWithRestrictedList(reservedOrderNumbers)
        }


        /*
         * generating brand new class which extends WebSecurityConfigurerAdapter
         */
        val dynamicConfigurerClass = InstrumentedClassProvider.generateRenamedClass(
                InstrumentedWebSecurityConfigurerTemplate::class.java,
                InstrumentedWebSecurityConfigurerTemplate.BASE_NAME_FOR_AUTOGENERATED_CLASS +
                        SimpleSequencer.getSingleton().getNextValue()
        )
        log.debug("dynamicConfigurerClass created in registerBeanDefinitions(): $dynamicConfigurerClass")

        /*
         * bean definition with supplier to provide instance of the above generated class which
         * extends WebSecurityConfigurerAdapter
         */
        @Suppress("UNCHECKED_CAST")
        val bd = BeanDefinitionBuilder.genericBeanDefinition(dynamicConfigurerClass as Class<WebSecurityConfigurerAdapter>){

            log.debug("Bean supplier called for $dynamicConfigurerClass type bean")

            /*
             * supplier logic
             */
            val configurersFactories = listableBeanFactory.getBean(ConfigurersFactories::class.java)
            val constructor = dynamicConfigurerClass.getConstructor(ConfigurersFactories::class.java)
            //constructor.newInstance(configurersFactories)
            val beanInstance = constructor.newInstance(configurersFactories)
            log.debug("Bean supplier has created bean: $beanInstance")
            beanInstance
        }.beanDefinition

        /*
         * ensure the anntation properties will be injected to the bean defined by the above definition
         */
        bd.propertyValues.add("enableAnnotationAttributes", annotationAttributes)
        //bd.initMethodName = "initialize"

        /*
         * register the bean definition with the bean definition registry
         */
        registry.registerBeanDefinition(
                dynamicConfigurerClass.canonicalName, bd
        )
        log.info("Bean definition for ASM generated class registered under name " +
                "${dynamicConfigurerClass.canonicalName}")
    }

    private fun findReservedOrderNumbers(): List<Int> {
        log.debug("findReservedOrdersNumbers() called")
        return ReservedNumbersFinder(listableBeanFactory).findReservedNumbers()
    }
}
